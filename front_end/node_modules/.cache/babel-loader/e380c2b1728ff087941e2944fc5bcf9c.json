{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Will\\\\Desktop\\\\FlightService\\\\front_end\\\\src\\\\components\\\\Counter\\\\ClassCounter.jsx\";\nimport React from 'react'; // Before function hooks we used class components for stateful components\n// You'll often hear class components referred to as \"classical components\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ClassCounter extends React.Component {\n  // The constructor is going be used to initialize things in React class components\n  constructor() {\n    super(); // This will register with React.Component constructor to enable it to be a React component\n\n    this.state = {\n      count: 0\n    };\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n\n  increment() {\n    // Never mutate state directly\n    // State is immutable\n    // setState will indicate to React that a rerender should happen\n    // this.state.count++;\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  decrement() {\n    // this.state.count--;\n    this.setState({\n      count: this.state.count - 1\n    });\n  } // Lifecycle methods\n  // These functions called at various stages of a components lifecycle\n  // Runs as soon as the component is rendered for the very first time\n  // If there's any data we need to fetch using an HTTP request, this is typically a good spot to do so\n\n\n  componentDidMount() {\n    console.log('I am rendered!');\n  } // Runs right before the component is unrendered/removed from the DOM\n  // This is useful for any cleanup that may occur\n  // clearInterval should done here\n\n\n  componentWillUnmount() {\n    console.log('I am about to be unrendered');\n  } // Runs everytime a rerender occurs (AKA whenever the state changes)\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // Do not setState in here. Or you will recursively call this function\n    // If the count changed, then run this code\n    if (prevState.count !== this.state.count) {\n      console.log(this.state.count);\n    }\n  } // Render is akin to return in a function component\n  // It \"renders\" the JSX to the page\n  // React will look to call render on any class component automatically\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello Class Component!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Current Count is: \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.decrement,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"names":["React","ClassCounter","Component","constructor","state","count","increment","bind","decrement","setState","componentDidMount","console","log","componentWillUnmount","componentDidUpdate","prevProps","prevState","render"],"sources":["C:/Users/Will/Desktop/FlightService/front_end/src/components/Counter/ClassCounter.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n// Before function hooks we used class components for stateful components\r\n\r\n// You'll often hear class components referred to as \"classical components\"\r\n\r\nexport class ClassCounter extends React.Component {\r\n\r\n    // The constructor is going be used to initialize things in React class components\r\n    constructor() {\r\n        super(); // This will register with React.Component constructor to enable it to be a React component\r\n        this.state = {\r\n            count: 0\r\n        }\r\n        this.increment = this.increment.bind(this);\r\n        this.decrement = this.decrement.bind(this);\r\n    }\r\n\r\n    increment() {\r\n        // Never mutate state directly\r\n        // State is immutable\r\n        // setState will indicate to React that a rerender should happen\r\n        // this.state.count++;\r\n\r\n        this.setState({count: this.state.count + 1});\r\n    }\r\n\r\n    decrement() {\r\n        // this.state.count--;\r\n        this.setState({count: this.state.count - 1});\r\n    }\r\n\r\n    // Lifecycle methods\r\n    // These functions called at various stages of a components lifecycle\r\n\r\n    // Runs as soon as the component is rendered for the very first time\r\n    // If there's any data we need to fetch using an HTTP request, this is typically a good spot to do so\r\n    componentDidMount() {\r\n        console.log('I am rendered!');\r\n    }\r\n\r\n    // Runs right before the component is unrendered/removed from the DOM\r\n    // This is useful for any cleanup that may occur\r\n    // clearInterval should done here\r\n    componentWillUnmount() {\r\n        console.log('I am about to be unrendered');\r\n    }\r\n\r\n    // Runs everytime a rerender occurs (AKA whenever the state changes)\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // Do not setState in here. Or you will recursively call this function\r\n\r\n        // If the count changed, then run this code\r\n        if (prevState.count !== this.state.count) {\r\n            console.log(this.state.count);\r\n        }\r\n    }\r\n\r\n    // Render is akin to return in a function component\r\n    // It \"renders\" the JSX to the page\r\n    // React will look to call render on any class component automatically\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Hello Class Component!</h1>\r\n                {/* {} indicates an expression. It's an area where we can inject values, or write JavaScript code */}\r\n                <h2>Current Count is: {this.state.count}</h2>\r\n                <button onClick={this.increment}>+</button>\r\n                <button onClick={this.decrement}>-</button>\r\n            </>\r\n        );\r\n    }\r\n}"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;;;;AAEA,OAAO,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;EAE9C;EACAC,WAAW,GAAG;IACV,QADU,CACD;;IACT,KAAKC,KAAL,GAAa;MACTC,KAAK,EAAE;IADE,CAAb;IAGA,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;IACA,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;EACH;;EAEDD,SAAS,GAAG;IACR;IACA;IACA;IACA;IAEA,KAAKG,QAAL,CAAc;MAACJ,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;IAA3B,CAAd;EACH;;EAEDG,SAAS,GAAG;IACR;IACA,KAAKC,QAAL,CAAc;MAACJ,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;IAA3B,CAAd;EACH,CAxB6C,CA0B9C;EACA;EAEA;EACA;;;EACAK,iBAAiB,GAAG;IAChBC,OAAO,CAACC,GAAR,CAAY,gBAAZ;EACH,CAjC6C,CAmC9C;EACA;EACA;;;EACAC,oBAAoB,GAAG;IACnBF,OAAO,CAACC,GAAR,CAAY,6BAAZ;EACH,CAxC6C,CA0C9C;;;EACAE,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;IACrC;IAEA;IACA,IAAIA,SAAS,CAACX,KAAV,KAAoB,KAAKD,KAAL,CAAWC,KAAnC,EAA0C;MACtCM,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWC,KAAvB;IACH;EACJ,CAlD6C,CAoD9C;EACA;EACA;;;EACAY,MAAM,GAAG;IACL,oBACI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAGI;QAAA,iCAAuB,KAAKb,KAAL,CAAWC,KAAlC;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ,eAII;QAAQ,OAAO,EAAE,KAAKC,SAAtB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ,eAKI;QAAQ,OAAO,EAAE,KAAKE,SAAtB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ;IAAA,gBADJ;EASH;;AAjE6C"},"metadata":{},"sourceType":"module"}