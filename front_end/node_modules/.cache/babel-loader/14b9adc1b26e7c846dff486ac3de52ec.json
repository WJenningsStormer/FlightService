{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Will\\\\Desktop\\\\FlightService\\\\front_end\\\\src\\\\components\\\\RefExample.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const RefExample = () => {\n  _s();\n\n  // useRef and useState are super similar\n\n  /**\r\n   * useRef\r\n   * \r\n   * If I change useRef, it does NOT cause a rerender (unlike useState)\r\n   * useRef is a step above a local variable (ex. let count = 0) since it's value is persisted across rerenders\r\n   * \r\n   * We can also use ref to bind it to a native HTML element\r\n   * This is opposed to document.getElementById('someId')\r\n   * \r\n   */\n  // I can update this value on my own. There's no setter since it's not state\n  let count = useRef(0);\n  const inputRef = useRef();\n  const [toggle, setToggle] = useState(false);\n\n  const increment = () => {\n    count.current++;\n    console.log(count);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"The current value of the ref is: \", count.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increment,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setToggle(!toggle),\n      children: \"Toggle State\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(inputRef.current.value),\n      children: \"Check Input Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RefExample, \"wcscHxw8FjT7iFcHtj4DuXAi4ik=\");\n\n_c = RefExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"RefExample\");","map":{"version":3,"names":["useRef","useState","RefExample","count","inputRef","toggle","setToggle","increment","current","console","log","value"],"sources":["C:/Users/Will/Desktop/FlightService/front_end/src/components/RefExample.jsx"],"sourcesContent":["import { useRef, useState } from \"react\";\r\n\r\nexport const RefExample = () => {\r\n    // useRef and useState are super similar\r\n\r\n    /**\r\n     * useRef\r\n     * \r\n     * If I change useRef, it does NOT cause a rerender (unlike useState)\r\n     * useRef is a step above a local variable (ex. let count = 0) since it's value is persisted across rerenders\r\n     * \r\n     * We can also use ref to bind it to a native HTML element\r\n     * This is opposed to document.getElementById('someId')\r\n     * \r\n     */\r\n\r\n    // I can update this value on my own. There's no setter since it's not state\r\n    let count = useRef(0);\r\n    const inputRef = useRef();\r\n\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n    const increment = () => {\r\n        count.current++;\r\n        console.log(count);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>The current value of the ref is: {count.current}</h3>\r\n            <button onClick={increment}>+</button>\r\n            <button onClick={() => setToggle(!toggle)}>Toggle State</button>\r\n            <input ref={inputRef} />\r\n            <button onClick={() => console.log(inputRef.current.value)}>Check Input Value</button>\r\n        </>\r\n    );\r\n}"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;EAAA;;EAC5B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI;EACA,IAAIC,KAAK,GAAGH,MAAM,CAAC,CAAD,CAAlB;EACA,MAAMI,QAAQ,GAAGJ,MAAM,EAAvB;EAEA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;;EAEA,MAAMM,SAAS,GAAG,MAAM;IACpBJ,KAAK,CAACK,OAAN;IACAC,OAAO,CAACC,GAAR,CAAYP,KAAZ;EACH,CAHD;;EAKA,oBACI;IAAA,wBACI;MAAA,gDAAsCA,KAAK,CAACK,OAA5C;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAQ,OAAO,EAAED,SAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAQ,OAAO,EAAE,MAAMD,SAAS,CAAC,CAACD,MAAF,CAAhC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAO,GAAG,EAAED;IAAZ;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKI;MAAQ,OAAO,EAAE,MAAMK,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACI,OAAT,CAAiBG,KAA7B,CAAvB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA,gBADJ;AASH,CAlCM;;GAAMT,U;;KAAAA,U"},"metadata":{},"sourceType":"module"}